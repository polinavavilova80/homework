/*задание 2
1.int *ptr = (int*)malloc(sizeof(int)) - В C++ int *ptr = new int; (для выделения памяти под одно целое число). 
2.int *ptrArr = (int*)malloc(sizeof(int)*N) - В C++ int *ptrArr = new int[N]; (для выделения памяти под массив из n целых чисел). 
3.free(ptr) - В C++ для освобождения памяти, выделенной с помощью new, используется delete ptr;. 
4.free(ptrArr) - В C++ для освобождения памяти, выделенной с помощью new[], используется  delete[] ptrArr;. 
В C++ также необходимо освобождать динамически выделенную память с помощью delete или delete[], чтобы избежать утечек памяти. 
 Попытка освободить одну и ту же выделенную память дважды приводит к неопределенному поведению программы и может вызвать ошибки времени выполнения. 
 Попытка освободить невыделенную память тоже приводит к неопределенному поведению программы и может вызвать ошибки времени выполнения. Необходимо только освобождать память, которая была выделена с помощью new или new[ ].*/


 #include <iostream> 
 
int main() { 
    int numRows; 
    std::cout << "Введите количество строк для Треугольника Фибоначчи: "; 
    std::cin >> numRows; 
 
    // Выделяем динамическую память для хранения Треугольника Фибоначчи 
    int** arr = new int*[numRows]; 
 
    for (int i = 0; i < numRows; ++i) { 
        arr[i] = new int[i + 1];  // Каждая строка имеет i + 1 элементов 
    } 
 
    // Заполняем Треугольник Фибоначчи 
    for (int i = 0; i < numRows; ++i) { 
        for (int j = 0; j <= i; ++j) { 
            if (i < 2  j == 0  j == i) { 
                arr[i][j] = 1;  // Начальные значения 1 
            } else { 
                // Вычисляем следующее значение на основе предыдущих 2-ух
                arr[i][j] = arr[i - 1][j - 1] + arr[i - 1][j]; 
            } 
        } 
    } 
 
    // Выводим Треугольник Фибоначчи 
    for (int i = 0; i < numRows; ++i) { 
        for (int j = 0; j <= i; ++j) { 
            std::cout << arr[i][j] << " "; 
        } 
        std::cout << std::endl; 
    } 
 
    // Освобождаем выделенную память 
    for (int i = 0; i < numRows; ++i) { 
        delete[] arr[i]; 
    } 
    delete[] arr; 
 
    return 0; 
} 